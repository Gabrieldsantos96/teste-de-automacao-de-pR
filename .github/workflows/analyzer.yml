name: PR Analyzer

on:
  pull_request:
    branches:
      - main
    types: [opened, synchronize]

jobs:
  analyze-pr:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout da branch base (main) com hist√≥rico completo
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: main
          fetch-depth: 0

      # 2Ô∏è‚É£ Debug: Log do SHA do head do PR e informa√ß√µes do PR
      - name: Log PR details
        run: |
          echo "PR Head SHA: ${{ github.event.pull_request.head.sha }}"
          echo "PR Head Ref: ${{ github.event.pull_request.head.ref }}"
          echo "PR Base SHA: ${{ github.event.pull_request.base.sha }}"
          echo "PR Base Ref: ${{ github.event.pull_request.base.ref }}"
          echo "Repository: ${{ github.repository }}"
          echo "PR Number: ${{ github.event.pull_request.number }}"

      # 3Ô∏è‚É£ Buscar o head do PR
      - name: Fetch PR head
        run: |
          git fetch origin ${{ github.event.pull_request.head.sha }}:pr-head || {
            echo "Falha ao buscar o SHA do head do PR: ${{ github.event.pull_request.head.sha }}";
            exit 1;
          }

      # 4Ô∏è‚É£ Listar arquivos modificados
      - name: Get modified files
        id: files
        run: |
          FILES=$(git diff --name-only main...pr-head --diff-filter=ACM || echo "Nenhum arquivo modificado")
          echo "Arquivos modificados: $FILES"
          echo "files<<EOF" >> $GITHUB_OUTPUT
          echo "$FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # 5Ô∏è‚É£ Coletar diffs completos
      - name: Collect file diffs
        id: diffs
        run: |
          DIFFS=$(git diff main...pr-head || echo "Nenhum diff dispon√≠vel")
          echo "Diffs: $DIFFS"
          echo "diffs<<EOF" >> $GITHUB_OUTPUT
          echo "$DIFFS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # 6Ô∏è‚É£ Enviar diffs para OpenRouter
      - name: Send to OpenRouter
        id: chatgpt
        env:
          FILES: ${{ steps.files.outputs.files }}
          DIFFS: ${{ steps.diffs.outputs.diffs }}
          AI_AGENT: ${{ secrets.AI_AGENT }}
        run: |
          if [ -z "$AI_AGENT" ]; then
            echo "Erro: Segredo AI_AGENT n√£o est√° definido"
            exit 1
          fi
          echo "Enviando para OpenRouter..."
          echo "Arquivos: $FILES"
          echo "Diffs: $DIFFS"
          RESPONSE=$(curl -s -w "\n%{http_code}" https://openrouter.ai/api/v1/chat/completions \
            -H "Authorization: Bearer $AI_AGENT" \
            -H "Content-Type: application/json" \
            -d "{
              \"model\": \"openai/gpt-4o-mini\",
              \"messages\": [
                {\"role\": \"system\", \"content\": \"Voc√™ √© um analista de Pull Requests. Gere relat√≥rios t√©cnicos detalhados de forma clara e estruturada, incluindo resumo, novas features, impacto no sistema, poss√≠veis melhorias de c√≥digo, pontos de aten√ß√£o em bugs/performance e um diagrama textual em Mermaid.\"},
                {\"role\": \"user\", \"content\": \"Analise este Pull Request e gere um relat√≥rio completo.\n\nArquivos modificados:\n$FILES\n\nDiffs:\n$DIFFS\"}
              ]
            }")
          HTTP_STATUS=$(echo "$RESPONSE" | tail -n1)
          RESPONSE_BODY=$(echo "$RESPONSE" | sed -e '$d')
          echo "Status HTTP da API: $HTTP_STATUS"
          echo "Resposta bruta da API: $RESPONSE_BODY"
          if [ "$HTTP_STATUS" != "200" ]; then
            echo "Erro: API retornou status $HTTP_STATUS"
            PARSED="Erro: Falha na chamada √† API (status $HTTP_STATUS)"
          else
            PARSED=$(echo "$RESPONSE_BODY" | jq -r '.choices[0].message.content // "Erro: Sem resposta v√°lida da API"')
          fi
          echo "Relat√≥rio parseado: $PARSED"
          echo "report<<EOF" >> $GITHUB_OUTPUT
          echo "$PARSED" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # 7Ô∏è‚É£ Publicar relat√≥rio como coment√°rio no PR
      - name: Post PR Analysis as comment
        uses: peter-evans/create-or-update-comment@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }} # Mude para ${{ secrets.GHT }} se usar um PAT
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ## ü§ñ PR Analyzer Report
            ${{ steps.chatgpt.outputs.report }}